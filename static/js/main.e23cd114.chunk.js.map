{"version":3,"sources":["components/SingleCard.jsx","utils/useLocalStorage.js","App.js","index.js"],"names":["SingleCard","image","handleChoice","flipped","disabled","scale","style","flex","className","src","alt","onClick","useLocalStorage","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","App","newArray","setNewArray","pokemonArray","setPokemonArray","turns","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","setDisabled","level","setLevel","levelLength","setLevelLength","heder","setHeder","endThisRound","setEndThisRound","setScale","score","setScore","useMemo","pokemonGenerate","i","Math","floor","random","matched","shuffleCards","arrItem","randomPlace","dabbledArr","numberOfItems","length","shuffleArr","map","id","useEffect","prevPokemon","pokemon","resetTurn","setTimeout","prevTurn","matchedChecker","every","clearTimeout","prevLevel","prevLevelLength","prevScale","prevScore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e23cd114.chunk.js","sourcesContent":["import React from 'react';\r\nimport './singleCard.css';\r\n\r\n\r\nconst SingleCard = ({\r\n    image,\r\n    handleChoice,\r\n    flipped,\r\n    disabled,\r\n    scale\r\n\r\n}) => {\r\n\r\n    const handleClick = () => {\r\n        if (!disabled) {\r\n            handleChoice(image)\r\n        }\r\n    }\r\n    return (\r\n        <div\r\n            style={{\r\n                flex: `0 1 calc(16rem * ${scale})`\r\n            }}\r\n            className=\"card\">\r\n            <div\r\n                className={flipped ? \"flipped\" : \"\"}\r\n            >\r\n                <img\r\n                    className=\"front\"\r\n                    src={image.src}\r\n                    alt='card front'\r\n                    style={{ 'maxHeight': `calc(200px * ${scale})`, 'maxWidth': `calc(250px * ${scale})` }}\r\n                />\r\n                <img\r\n                    className=\"back\"\r\n                    src=\"https://www.logopik.com/wp-content/uploads/edd/2018/07/Pokeball-Vector-Logo.png\"\r\n                    alt=\"card caver\"\r\n                    onClick={handleClick}\r\n                />\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default SingleCard\r\n","import { useState } from \"react\";\r\n\r\n// Hook\r\nfunction useLocalStorage(key, initialValue) {\r\n  // State to store our value\r\n  // Pass initial state function to useState so logic is only executed once\r\n  const [storedValue, setStoredValue] = useState(() => {\r\n    try {\r\n      // Get from local storage by key\r\n      const item = window.localStorage.getItem(key);\r\n      // Parse stored json or if none return initialValue\r\n      return item ? JSON.parse(item) : initialValue;\r\n    } catch (error) {\r\n      // If error also return initialValue\r\n      console.log(error);\r\n      return initialValue;\r\n    }\r\n  });\r\n  // Return a wrapped version of useState's setter function that ...\r\n  // ... persists the new value to localStorage.\r\n  const setValue = (value) => {\r\n    try {\r\n      // Allow value to be a function so we have same API as useState\r\n      const valueToStore =\r\n        value instanceof Function ? value(storedValue) : value;\r\n      // Save state\r\n      setStoredValue(valueToStore);\r\n      // Save to local storage\r\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n    } catch (error) {\r\n      // A more advanced implementation would handle the error case\r\n      console.log(error);\r\n    }\r\n  };\r\n  return [storedValue, setValue];\r\n}\r\nexport default useLocalStorage;","import React, { useState, useEffect, useMemo } from 'react';\nimport './App.css';\nimport SingleCard from './components/SingleCard';\nimport useLocalStorage from './utils/useLocalStorage';\n\nfunction App() {\n\n  const [newArray, setNewArray] = useState([]);//Initial array \n  const [pokemonArray, setPokemonArray] = useState([]);// img array\n  const [turns, setTurns] = useState(0);\n\n  const [choiceOne, setChoiceOne] = useState(null);\n  const [choiceTwo, setChoiceTwo] = useState(null);\n  const [disabled, setDisabled] = useState(false);\n\n  const [level, setLevel] = useLocalStorage('level', 1);\n  const [levelLength, setLevelLength] = useLocalStorage('levelLength', 3);//1/2 cards in the game\n  const [heder, setHeder] = useState(\"Memory Game\");//heder for the page\n\n  const [endThisRound, setEndThisRound] = useState(false);//end of the round = all cards open\n  const [scale, setScale] = useLocalStorage('scale', 1);//scale of the cards getting smaller etch round\n  const [score, setScore] = useLocalStorage('score', 0);\n\n\n  //generate the array of cards\n  useMemo(() => {\n    let pokemonGenerate = [];\n    for (let i = 0; i < levelLength; i++) {\n      pokemonGenerate[i] = {\n        src: `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/dream-world/${Math.floor((Math.random() * 648) + 1)}.svg`,\n        matched: false,\n      }\n    }\n    setNewArray(pokemonGenerate);\n  }, [levelLength])\n\n  // sorting the cards\n  const shuffleCards = () => {\n    let dabbledArr = [...newArray, ...newArray]\n    let numberOfItems = dabbledArr.length, arrItem, randomPlace;\n    // While there remain elements to shuffle…\n    while (numberOfItems) {\n      // Pick a remaining element…\n      randomPlace = Math.floor(Math.random() * numberOfItems--)\n      // And swap it with the current element.\n      arrItem = dabbledArr[numberOfItems];\n      dabbledArr[numberOfItems] = dabbledArr[randomPlace]\n      dabbledArr[randomPlace] = arrItem\n    }\n    const shuffleArr = dabbledArr.map(item => ({ ...item, id: Math.floor(Math.random() * 1000) }))\n    setPokemonArray(shuffleArr)\n    setTurns(0)\n    setChoiceOne(null)\n    setChoiceTwo(null)\n  }\n\n  //handle a choice\n  const handleChoice = (image) => {\n    choiceOne\n      ? setChoiceTwo(image)\n      : setChoiceOne(image)\n  }\n\n  //matching cards\n  useEffect(() => {\n    if (choiceOne && choiceTwo) {\n      setDisabled(true)\n      if (choiceOne.src === choiceTwo.src) {\n        setPokemonArray(prevPokemon => {\n          return prevPokemon.map(pokemon => {\n            if (pokemon.src === choiceOne.src) {\n              return { ...pokemon, matched: true }\n            } else {\n              return pokemon\n            }\n          })\n        })\n        resetTurn()\n      }\n      else {\n        setTimeout(() => resetTurn(), 1000)\n      }\n    }\n  }, [choiceOne, choiceTwo])\n\n\n  //setting for the new turn\n  const resetTurn = () => {\n    setChoiceOne(null)\n    setChoiceTwo(null)\n    setTurns(prevTurn => prevTurn + 1)\n    setDisabled(false)\n  }\n\n  //setting for the new level/round\n  const resetLevel = () => {\n    setChoiceOne(null)\n    setChoiceTwo(null)\n    setTurns(0)\n    setDisabled(false)\n  }\n\n  //Chekiang if this round is over and moving to the next round\n  useEffect(() => {\n    let matchedChecker = pokemonArray.every((pokemon) => {\n      return pokemon.matched === true\n    })\n\n    if (turns && matchedChecker === true) {\n      setTimeout(() => setEndThisRound(true), 3000)\n      setTimeout(() => setHeder(\"Good Job! Next Level\"), 1500)\n\n    }\n    return () => clearTimeout()\n  }, [pokemonArray, turns])\n\n  //starting new round more cards \n  useEffect(() => {\n    if (endThisRound) {\n      setEndThisRound(false)\n      resetLevel()\n      setLevel(prevLevel => prevLevel + 1)\n      setLevelLength(prevLevelLength => prevLevelLength + 1)\n      setScale(prevScale => prevScale - 0.075)\n      setScore(prevScore => prevScore + Math.floor(((pokemonArray.length / 2) / turns) * 100))\n      shuffleCards()\n    }\n  }, [endThisRound])\n\n  //starting the game automatically\n  useEffect(() => {\n    shuffleCards()\n    setTimeout(() => setHeder(\"\"), 3500)\n    return () => clearTimeout()\n\n  }, [levelLength])\n\n\n  return (\n    <div className=\"game\">\n      <div className=\"heder\"> {heder}</div>\n      <div className=\"game-data\">\n        <div>Turns: {turns}</div>\n        <div>Level: {level}</div>\n        <div>Score: {score}</div>\n      </div>\n\n      <div className=\"card-grid\">\n        {pokemonArray.map(pokemon => (\n          <SingleCard\n            image={pokemon}\n            key={pokemon.id}\n            handleChoice={handleChoice}\n            flipped={pokemon === choiceOne || pokemon === choiceTwo || pokemon.matched}\n            disabled={disabled}\n            scale={scale}\n          />\n        ))}\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}